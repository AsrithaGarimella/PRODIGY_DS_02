#mounting the drive
from google.colab import drive
drive.mount('/content/drive')

#import required libarries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#reading csv dataset
df= pd.read_csv("/content/drive/MyDrive/Colab Notebooks/train.csv")
df
df.head()
df.tail()
df.shape
df.columns
df.dtypes
df.info()
df.describe()
df = df.fillna(method = "ffill")
df.head()

# Check for missing values
print(df.isnull().sum())

# Deal with missing values (e.g., fillna for Age, Embarked)
df['Age'].fillna(df['Age'].median(), inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)

df

# Visualize survival count
survived_counts = df['Survived'].value_counts()
plt.bar(survived_counts.index, survived_counts.values)
plt.xlabel('Survived')
plt.ylabel('Count')
plt.title('Survival Count')
plt.show()

# Analyze survival based on other variables (e.g., Sex, Pclass, Age)
# Example: Survival based on Sex
survival_by_sex = df.groupby('Sex')['Survived'].mean()
survival_by_sex.plot(kind='bar')
plt.xlabel('Sex')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Sex')
plt.show()

# Age distribution of passengers
plt.hist(df['Age'], bins=20)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution of Passengers')
plt.show()

# Survival rate by age group
df['Age_Group'] = pd.cut(df['Age'], bins=[0, 12, 18, 60, 100], labels=['Child', 'Teenager', 'Adult', 'Elderly'])
survival_by_age_group = df.groupby('Age_Group')['Survived'].mean()
survival_by_age_group.plot(kind='bar')
plt.xlabel('Age Group')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Age Group')
plt.show()

# Survival rate by passenger class
survival_by_class = df.groupby('Pclass')['Survived'].mean()
survival_by_class.plot(kind='bar', color='skyblue')
plt.xlabel('Passenger Class')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Passenger Class')
plt.xticks(rotation=0)
plt.show()

# Fare distribution across different classes
plt.hist(df[df['Pclass'] == 1]['Fare'], bins=30, alpha=0.7, label='Class 1', color='green')
plt.hist(df[df['Pclass'] == 2]['Fare'], bins=30, alpha=0.5, label='Class 2', color='orange')
plt.hist(df[df['Pclass'] == 3]['Fare'], bins=30, alpha=0.5, label='Class 3', color='red')
plt.xlabel('Fare')
plt.ylabel('Frequency')
plt.title('Fare Distribution by Passenger Class')
plt.legend()
plt.show()

# Survival rate based on both Sex and Pclass
gender_class_survival = df.groupby(['Sex', 'Pclass'])['Survived'].mean().unstack()
gender_class_survival.plot(kind='bar', stacked=True)
plt.xlabel('Sex')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Sex and Passenger Class')
plt.xticks(rotation=0)
plt.legend(title='Passenger Class')
plt.show()

# Survival rate by embarked port
survival_by_embarkation = df.groupby('Embarked')['Survived'].mean()
survival_by_embarkation.plot(kind='bar', color='purple')
plt.xlabel('Embarked Port')
plt.ylabel('Survival Rate')
plt.title('Survival Rate by Embarked Port')
plt.xticks(rotation=0)
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Data preparation
df.dropna(subset=['Age', 'Embarked'], inplace=True)
df['Sex'] = df['Sex'].map({'female': 0, 'male': 1})
df['Embarked'] = df['Embarked'].map({'S': 0, 'C': 1, 'Q': 2})

# Features and target variable
X = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']]
y = df['Survived']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Random Forest model
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
predictions = rf_model.predict(X_test)

# Model evaluation
print(f"Accuracy: {accuracy_score(y_test, predictions)}")
print(f"Classification Report:\n{classification_report(y_test, predictions)}")
print(f"Confusion Matrix:\n{confusion_matrix(y_test, predictions)}")

import seaborn as sns

# Selecting key features for pairplot
pairplot_data = df[['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]

# Pairplot for key features
sns.pairplot(pairplot_data, hue='Survived', diag_kind='hist')
plt.suptitle('Pairplot of Key Features')
plt.show()

# Fare and Age Distribution by Survival
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='Fare', hue='Survived', data=df)
plt.title('Fare and Age Distribution by Survival')
plt.show()

# Embarked Port and Passenger Class Distribution
sns.catplot(x='Embarked', hue='Pclass', kind='count', data=df)
plt.title('Embarked Port and Passenger Class Distribution')
plt.show()

# Additional feature engineering for correlation heatmap
df['Family_Size'] = df['SibSp'] + df['Parch']
df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\.', expand=False)

# Mapping title to numerical values
title_mapping = {'Mr': 1, 'Miss': 2, 'Mrs': 3, 'Master': 4, 'Dr': 5, 'Rev': 6, 'Others': 7}
df['Title'] = df['Title'].map(title_mapping)
df['Title'].fillna(7, inplace=True)

# Correlation heatmap including additional features
plt.figure(figsize=(12, 10))
correlation_matrix = df.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap (Advanced)')
plt.show()
